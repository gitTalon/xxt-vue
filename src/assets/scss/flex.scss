@charset 'utf-8';
/*弹性盒子11*/ 



.flex{
    display:-webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

/*flex-direciton 弹性子元素在父容器中的位置*/ 
.direct-row{
    @extend .flex;
    flex-direction: row;
}
.direct-row-reverse{
    @extend .flex;
    flex-direction: row-reverse;
}
.direct-col{
    @extend .flex;
    flex-direction: column;
}
.direct-col-reverse{
    @extend .flex;
    flex-direction: column-reverse;
}


/*flex -justify-content 内容对齐（justify-content）属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线（main axis）对齐*/
.flex-x-start{
    @extend .flex;    //混合 括号也可去掉
    justify-content: flex-start;
}
.flex-x-center{
    @extend .flex;
    justify-content: center;
}
.flex-x-end{
    @extend .flex;
    justify-content: flex-end;
}
.flex-x-justify{
    @extend .flex;
    justify-content: space-between;
}
.flex-x-around{
    @extend .flex;
    justify-content: space-around;
}

/*flex align-items 设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式*/

.flex-y-start{
    @extend .flex;
    align-items: flex-start;
}

.flex-y-center{
    @extend .flex;
    align-items: center;
}

.flex-y-end{
    @extend .flex;
    align-items: flex-end;
}
.flex-y-baseline {
    @extend .flex;
    align-items: baseline ;
}
.flex-y-stretch{
    @extend .flex;
    align-items: stretch;
}

.flex-center{
    @extend .flex;    //混合 括号也可去掉
    justify-content: center;
    align-items: center;
}

/*flex-wrap 弹性盒子的子元素换行方式*/
.flex-nowrap{
    @extend .flex;
    flex-wrap: nowrap ;//默认， 弹性容器为单行。该情况下弹性子项可能会溢出容器
}

//可用于换行，如：搜索记录--文字超出换一行显示
.flex-wrap{
    @extend .flex;
    flex-wrap: wrap;// 弹性容器为多行。该情况下弹性子项溢出的部分会被放置到新行，子项内部会发生断行
}
.flex-wrap-reverse{
    @extend .flex;
    flex-wrap:wrap-reverse// -反转 wrap 排列。
}

/*align-content 用于修改 flex-wrap 属性的行为。类似于 align-items, 但它不是设置弹性子元素的对齐，而是设置各个行的对齐。*/



/*wrap align-content*/
.wrap-stretch{
    @extend .flex-wrap;
    align-content: stretch;//默认
}
.wrap-start{
    @extend .flex-wrap;
    align-content: flex-start;
}

.wrap-end {
    @extend .flex-wrap;
    align-content: flex-end ;
}
.wrap-center {
    @extend .flex-wrap;
    align-content: center ;
}

.wrap-between{
    @extend .flex-wrap;
    align-content: space-between;
}

.wrap-around {
    @extend .flex-wrap;
    align-content: space-around ;
    // box-shadow:2px 2px #333;
}


/*wrap-reverse   align-content*/
.wrap-reverse-stretch{
   @extend  .flex-wrap-reverse;
    align-content: stretch;//默认
}
.wrap-reverse-start{
   @extend  .flex-wrap-reverse;
    align-content: flex-start;
}

.wrap-reverse-end {
   @extend  .flex-wrap-reverse;
    align-content: flex-end ;
}
.wrap-reverse-center {
   @extend  .flex-wrap-reverse;
    align-content: center ;
}

.wrap-reverse-between{
   @extend  .flex-wrap-reverse;
    align-content: space-between;
}

.wrap-reverse-around {
   @extend  .flex-wrap-reverse;
    align-content: space-around ;

}

/*align-self
align-self 属性用于设置弹性元素自身在侧轴（纵轴）方向上的对齐方式。
*/
.self-start{
    align-self: flex-start;
}
.self-end{
    align-self: flex-end;
}
.self-center{
    align-self: center;
}
.self-baseline{
    align-self:  baseline;
}
.self-stretch{
    align-self:  stretch;
}



//.flexNum(9);
//.flexNum(@n,@i:1) when (@i<=@n){
//  .flex-@{i}{
//      flex: @i;
//      width: 0;
//  }
//  .flexNum(@n,(@i+1))
//}



//.order-list(20);
//.order-list(@n,@i:1) when (@i<=@n){
//  .order-@{i}{
//      order: @i;
//  }
//  .order-list(@n,(@i+1))
//}


/*end 弹性盒子*/

